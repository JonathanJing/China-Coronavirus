palette = "Reds", legendTitle = "省级确诊人口")
rm(list=ls()) # remove all existing objects in the environment
library(jsonlite)
json_file <- 'https://interface.sina.cn/news/wap/fymap2020_data.d.json'
json_data <- fromJSON(json_file)
data_flatten <- flatten(json_data$data$list)
time <- json_data$data$mtime
name <- data_flatten$name
pop <- as.numeric(data_flatten$value)
provdata <- data.frame(time = time, provname = name, provpop = pop,
stringsAsFactors = FALSE)
citylist <- c()
surepop <- c()
provname <- c()
for (i in 1:34) {
city <- data_flatten$city[[i]]$name
connum <- data_flatten$city[[i]]$conNum
prov <- rep(data_flatten$name[i], times = nrow(data_flatten$city[[i]]))
citylist <- c(citylist, city)
surepop <- c(surepop, connum)
provname <- c(provname, prov)
}
citydata <- data.frame(time = time, provname = provname, city = citylist, citypop = as.numeric(surepop),
stringsAsFactors = FALSE)
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
city_beijing <- c(time, '北京', '北京', provdata[1,3])
city_shanghai <- c(time, '上海', '上海', provdata[15,3])
city_tianjing <- c(time, '天津', '天津', provdata[23,3])
city_chongqing <- c(time, '重庆', '重庆', provdata[7,3])
city_xianggang <- c(time, '香港', '香港', provdata[29,3])
city_aomen <- c(time, '澳门', '澳门', provdata[28,3])
city_taiwan <- c(time, '台湾', '台湾', provdata[27,3])
citydata2 <- rbind(citydata2, city_beijing)
citydata2 <- rbind(citydata2, city_shanghai)
citydata2 <- rbind(citydata2, city_tianjing)
citydata2 <- rbind(citydata2, city_chongqing)
citydata2 <- rbind(citydata2, city_xianggang)
citydata2 <- rbind(citydata2, city_aomen)
citydata2 <- rbind(citydata2, city_taiwan)
#create new dataset for mapping
#province level
provdatamap <- provdata
provdatamap[2,3] <- 1000 #Change confirmed population of Hubei for better map looking
#city level
citydatamap <- citydata2
citydatamap[16,4] <- 1000 #Change confirmed population of Wuhan to 1000
citydatamap[17,4] <- 1000 #Change confirmed population of Huanggang to 1000
library(leafletCN)
geojsonMap(provdatamap, "china",
namevar = ~provname, valuevar = ~provpop,
popup =  paste0(provdata$provname, ":", provdata$provpop),
palette = "Reds", legendTitle = "省级确诊人口")
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
popup =  paste0(citydata2$city, ":", citydata2$citypop),
na.color = "white", stroke = T,
palette = "Reds", legendTitle = "确诊人口")
?geojsonMap
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
popup =  paste0(citydata$city, ":", citydata$citypop),
na.color = "white", stroke = T,
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
popup =  paste0(citydata$city, ":", citydata$citypop),
na.color = "white",
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
popup =  paste0(citydata$city, ":", citydata$citypop),
palette = "Reds", legendTitle = "确诊人口")
View(citydata2)
View(citydatamap)
citydatamap[16,4]
View(citydatamap)
#city level
citydatamap <- citydata2
citydatamap[16,4] <- 1000 #Change confirmed population of Wuhan to 1000
citydatamap[17,4] <- 1000 #Change confirmed population of Huanggang to 1000
citydatamap[16,4]
View(citydatamap)
#city level
citydatamap <- citydata2
citydatamap[1,4] <- 1000 #Change confirmed population of Wuhan to 1000
citydatamap[2,4] <- 1000 #Change confirmed population of Huanggang to 1000
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
range(citydatamap)
range(citydata)
?leafletCN
??leafletCN
View(citydatamap)
str(citydatamap)
citydatamap[322,]
citydatamap[321,]
citydatamap[3211,]
citydatamap[320,]
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
?geojsonMap
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
na.color=NA,
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
View(citydata)
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white', domain = NUll,
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
?value
?runif
?readGeoLocal
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
city_beijing <- c(time, '北京', '北京', provdata[1,3])
city_shanghai <- c(time, '上海', '上海', provdata[15,3])
city_tianjing <- c(time, '天津', '天津', provdata[23,3])
city_chongqing <- c(time, '重庆', '重庆', provdata[7,3])
city_xianggang <- c(time, '香港', '香港', provdata[29,3])
city_aomen <- c(time, '澳门', '澳门', provdata[28,3])
citydata2 <- rbind(citydata2, city_beijing)
citydata2 <- rbind(citydata2, city_shanghai)
citydata2 <- rbind(citydata2, city_tianjing)
citydata2 <- rbind(citydata2, city_chongqing)
citydata2 <- rbind(citydata2, city_xianggang)
citydata2 <- rbind(citydata2, city_aomen)
#city level
citydatamap <- citydata2
citydatamap[1,4] <- 1000 #Change confirmed population of Wuhan to 1000
citydatamap[2,4] <- 1000 #Change confirmed population of Huanggang to 1000
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
View(citydata2)
View(citydatamap)
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
View(read.geoShape)
force(leafletGeo)
force(regionNames)
View(geojsonMap)
countries$value
View(mapNames)
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
#popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "确诊人口")
city_beijing <- c(time, '北京', '北京', provdata[1,3])
citydata2 <- rbind(citydata2, city_beijing)
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "确诊人口")
city_beijing <- c(time, '北京市', '北京市', provdata[1,3])
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
city_beijing <- c(time, '北京市', '北京市', provdata[1,3])
citydata2 <- rbind(citydata2, city_beijing)
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "确诊人口")
View(citydata2)
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
citydata2 <- citydata2[c(city_beijing),]
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
View(data_flatten)
View(data_flatten[[7]][[1]])
View(data_flatten[[7]][[1]])
View(data_flatten[[7]][[1]])
# combine direct city data to only city level
citydata2 <- citydata
directcity <- which(provname %in% c('北京', '上海', '天津', '重庆'))
citydata2 <- citydata2[-c(directcity),]
library(tibble)
library(tibble)
citydata2 <- add_row(citydata2, city_beijing)
citydata2 <- add_row(citydata2, time, '北京', '北京', provdata[1,3])
citydata2 <- add_row(citydata2, time, provname = '北京', city = '北京', provdata[1,3])
provdata[1,3]
citydata2 <- add_row(citydata2, time = time, provname = '北京', city = '北京', citypop = provdata[1,3])
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "确诊人口")
citydata2 <- add_row(citydata2, time = time, provname = '上海', city = '上海', citypop = provdata[15,3])
citydata2 <- add_row(citydata2, time = time, provname = '天津', city = '天津', citypop = provdata[23,3])
citydata2 <- add_row(citydata2, time = time, provname = '重庆', city = '重庆', citypop = provdata[7,3])
citydata2 <- add_row(citydata2, time = time, provname = '香港', city = '香港', citypop = provdata[29,3])
citydata2 <- add_row(citydata2, time = time, provname = '澳门', city = '澳门', citypop = provdata[28,3])
geojsonMap(citydata2, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "确诊人口")
citydatamap[1,2]
citydatamap[2,2]
citydatamap[2,3]
#create new dataset for mapping
#province level
provdatamap <- provdata
provdatamap[2,3] <- 1000 #Change confirmed population of Hubei for better map looking
#city level
citydatamap <- citydata2
citydatamap[1,4] <- 1000 #Change confirmed population of Wuhan to 1000
citydatamap[2,4] <- 1000 #Change confirmed population of Huanggang to 1000
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Study/yiqing/China-Coronavirus")
View(provdata)
citydata2 <- add_row(citydata2, time = time, provname = '台湾', city = '台湾', citypop = provdata[27,3])
#city level
citydatamap <- citydata2
citydatamap[1,4] <- 1000 #Change confirmed population of Wuhan to 1000
citydatamap[2,4] <- 1000 #Change confirmed population of Huanggang to 1000
geojsonMap(citydatamap, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydatamap$city, ":", citydatamap$citypop),
palette = "Reds", legendTitle = "确诊人口")
？geojsonMap()
?geojsonMap
citydatamap[1,4]
?log
log(citydatamap[1,4])
log(citydatamap[,4])
citydata3 <- citydata2
citydata3[,4] <- log(citydata3[,4])
View(citydata3)
geojsonMap(citydata3, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "确诊人口")
geojsonMap(provdatamap, "china",
namevar = ~provname, valuevar = ~provpop,
popup =  paste0(provdata$provname, ":", provdata$provpop),
palette = "Reds", legendTitle = "省级确诊人口")
geojsonMap(citydata3, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds")
geojsonMap(citydata3, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "log(确诊人数)")
geojsonMap(provdatamap, "china",
namevar = ~provname, valuevar = ~provpop,
popup =  paste0(provdata$provname, ":", provdata$provpop),
palette = "Reds", legendTitle = "省级确诊人口")
geojsonMap(provdatamap, "china",
namevar = ~provname, valuevar = ~provpop,
popup =  paste0(provdata$provname, ":", provdata$provpop),
palette = "Reds", legendTitle = "省级确诊人数")
View(json_data)
json_data$data$historylist
#history data
historydata <- json_data$data$historylist
geojsonMap(citydata3, "city",
namevar = ~city, valuevar = ~citypop,
na.color = 'white',
popup =  paste0(citydata2$city, ":", citydata2$citypop),
palette = "Reds", legendTitle = "log(确诊人数)")
write.csv(provdata, file = paste(date,'historydata.csv'))
str(historydata)
write.csv(historydata, file = paste(date,'historydata.csv'))
View(historydata)
historydata$wuhan_susNum
-historydata$wuhan_susNum
within(df, rm(wuhan_susNum))
historydata[,-wuhan_susNum]
View(historydata)
historydata[,2]
historydata[,c(6:9)]
historydata[,-c(9)]
#history data
historydata <- json_data$data$historylist
historydata <- historydata[,-c(9)]
write.csv(historydata, file = paste(date,'historydata.csv'))
as.data.frame(json_data$data$historylist)
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
historydata <- historydata[,-c(9)]
write.csv(historydata, file = paste(date,'historydata.csv'))
as.numeric(historydata[,c(2:8)])
as.numeric(historydata[,c(2:8)])
as.numeric(historydata[,8])
as.numeric(historydata[,2:8])
as.numeric(historydata[,8])
as.numeric(historydata)
as.numeric(historydata[,c(2:3)])
as.numeric(unlist(historydata[,c(2:3)])
historydata <- historydata[,-c(9)]
as.numeric(unlist(historydata[,2:3]))
historydata <- as.numeric(unlist(historydata[,2:3]))
class(historydata)
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
class(historydata)
class(historydata$date)
class(historydata$cn_conNum)
data.frame(as.Date(date))
data.frame(historydata, as.Date(date))
data.frame(historydata, as.numeric(cn_conNum))
as.numeric(historydata$cn_conNum)
View(citydata)
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
historydata <- historydata[,-c(9)]
write.csv(historydata, file = paste(date,'historydata.csv'))
historydata
head(historydata)
type(historydata)
class(historydata)
historydata$date
write.csv(historydata, file = paste(date,'historydata.csv'))
write.csv(historydata, file = paste(date,'historydata.csv'))
write.csv(historydata, file = 'historydata-new.csv')
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
historydata <- historydata[,-c(9)]
write.csv(historydata, file = 'historydata.csv')
as.Date(02.02)
?as.Date
as.Date(02.02, '%m.%d')
as.Date(02.02, '%M.%D')
as.Date('02.02', '%m.%d')
as.Date(historydata$date, '%m.%d')
historydata$date <- as.Date(historydata$date, '%m.%d')
View(historydata)
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
historydata$date <- as.Date(historydata$date, '%m.%d')
historydata <- historydata[,-c(9)]
write.csv(historydata, file = 'historydata.csv')
lm(historydata$cn_conNum ~ historydata$date)
connum_lm <-  lm(historydata$cn_conNum ~ historydata$date)
summary(connum_lm)
library(ggplot2)
ggplot(historydata, aes(x = historydata$date, y = historydata$cn_conNum))
+ geom_boxplot()
ggplot(historydata, aes(y = historydata$date, x = historydata$cn_conNum))
+ geom_point()
ggplot(historydata, aes(x = historydata$date, y = historydata$cn_conNum))
ggplot(historydata, aes(x = date, y = cn_conNum))
ggplot(historydata, aes(x = date, y = cn_conNum))+
geom_point()
historydata[2:3]
historydata[2:3] <- as.numeric(historydata[2:3])
historydata$cn_conNum <- as.numeric(historydata$cn_conNum)
ggplot(historydata, aes(x = date, y = cn_conNum))+
geom_point()
historydata$cn_cureNum <- as.numeric(historydata$cn_deathNum)
historydata$cn_conNum <- as.numeric(historydata$cn_conNum)
historydata$cn_deathNum <- as.numeric(historydata$cn_deathNum)
historydata$cn_cureNum <- as.numeric(historydata$cn_deathNum)
library(ggplot2)
ggplot(historydata)+
geom_point(aes(x = date, y = cn_conNum))
ggplot(historydata) +
geom_point(aes(x = date, y = cn_conNum)) +
geom_point(aes(x= date, y = cn_deathNum))
ggplot(historydata) +
geom_point(aes(x = date, y = cn_conNum, color)) +
geom_point(aes(x= date, y = cn_deathNum))
ggplot(historydata) +
geom_point(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_point(aes(x = date, y = cn_deathNum, color = 'red')) +
geom_point(aes(x = date, y = cn_cureNum, color = 'green'))
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
historydata$date <- as.Date(historydata$date, '%m.%d')
historydata$cn_conNum <- as.numeric(historydata$cn_conNum)
historydata$cn_deathNum <- as.numeric(historydata$cn_deathNum)
historydata$cn_cureNum <- as.numeric(historydata$cn_cureNum)
historydata <- historydata[,-c(9)]
write.csv(historydata, file = 'historydata.csv')
connum_lm <-  lm(historydata$cn_conNum ~ historydata$date)
summary(connum_lm)
library(ggplot2)
ggplot(historydata) +
geom_point(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_point(aes(x = date, y = cn_deathNum, color = 'red')) +
geom_point(aes(x = date, y = cn_cureNum, color = 'green'))
ggplot(historydata) +
geom_line(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_point(aes(x = date, y = cn_deathNum, color = 'red')) +
geom_point(aes(x = date, y = cn_cureNum, color = 'green'))
ggplot(historydata) +
geom_line(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_line(aes(x = date, y = cn_deathNum, color = 'red')) +
geom_line(aes(x = date, y = cn_cureNum, color = 'green'))
View(historydata)
View(historydata)
#history data
historydata <- as.data.frame(json_data$data$historylist, stringsAsFactors = FALSE)
historydata <- historydata[,-c(6:9)]
historydata$date <- as.Date(historydata$date, '%m.%d')
historydata$cn_conNum <- as.numeric(historydata$cn_conNum)
historydata$cn_deathNum <- as.numeric(historydata$cn_deathNum)
historydata$cn_cureNum <- as.numeric(historydata$cn_cureNum)
View(historydata)
write.csv(historydata, file = 'historydata.csv')
library(ggplot2)
ggplot(historydata) +
geom_line(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_line(aes(x = date, y = cn_deathNum, color = 'red')) +
geom_line(aes(x = date, y = cn_cureNum, color = 'green'))
historydata$cn_susNum <- as.numeric(historydata$cn_susNum)
ggplot(historydata) +
geom_line(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_line(aes(x = date, y = cn_deathNum, color = 'red')) +
geom_line(aes(x = date, y = cn_cureNum, color = 'green')) +
geom_line(aes(x = date, y = cn_susNum, color = 'blue'))
ggplot(historydata) +
geom_point(aes(x = date, y = cn_conNum, color = 'yellow'))
ggplot(historydata) +
geom_point(aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_smooth(method = "lm", se = FALSE)
ggplot(historydata, aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(historydata, aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_point() +
geom_smooth(method = "lm")
ggplot(historydata, aes(x = date, y = cn_conNum, color = 'yellow')) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(historydata, aes(x = date, y = cn_deathNum, color = 'yellow')) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(historydata, aes(x = date, y = cn_deathNum, color = 'Yellow')) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(historydata, aes(x = date, y = cn_deathNum, color = "Yellow")) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(historydata, aes(x = date, y = cn_cureNum, color = "Yellow")) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
